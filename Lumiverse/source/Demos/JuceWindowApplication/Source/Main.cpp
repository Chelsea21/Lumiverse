/*
 ==============================================================================
 
 This file was auto-generated by the Introjucer!
 
 It contains the basic startup code for a Juce application.
 
 ==============================================================================
 */

#include "GuiConfig.h"

#include "../JuceLibraryCode/JuceHeader.h"
#include "../../../LumiverseCore/LumiverseCore.h"

#include "RenderingWindow.h"
#include "RepaintTimer.h"
#include "AnimationTimer.h"

using namespace Lumiverse;

//==============================================================================
class JuceWindowAppApplication  : public JUCEApplication
{
public:
    //==============================================================================
    JuceWindowAppApplication() {}
    
    const String getApplicationName() override       { return ProjectInfo::projectName; }
    const String getApplicationVersion() override    { return ProjectInfo::versionString; }
    bool moreThanOneInstanceAllowed() override       { return true; }
    
    //==============================================================================
    void initialise (const String& commandLine) override
    {
        /*
        m_rig = new Rig("/afs/andrew.cmu.edu/usr1/chenxil/Documents/Lumiverse/Lumiverse/data/arnold_photometric.json");
        
        m_rig->init();
        
        ArnoldPatch *patch = (ArnoldPatch*)m_rig->getSimulationPatch();
        
        m_renderingWindow = new RenderingWindow(patch->getWidth(), patch->getHeight(),
                                                patch->getBufferPointer(), m_rig);
        
        m_timer = new RepaintTimer(m_renderingWindow->getContentComponent());
        m_timer->startTimer(1000);
        
        m_rig->run();
         */
        m_rig = new Rig("/afs/andrew.cmu.edu/usr1/chenxil/Documents/Lumiverse/Lumiverse/data/arnold_photometric_cue.json");
        Device *par1 = m_rig->getDevice("par1");
        
        m_rig->init();
        m_rig->run();
        
        /*
        this_thread::sleep_for(chrono::seconds(2));
        
        par1->setParam("intensity", 0.5);
        
        this_thread::sleep_for(chrono::seconds(6));
        
        par1->setParam("intensity", 1.8);
        
        this_thread::sleep_for(chrono::seconds(1));
        */
        
        LumiverseColor color(par1->getColor("color"));
        LumiverseColor des(color);
        des.setRGB(0.f, 0.1f, 0.8f);
        time_t time = 0;
        time_t endTime = 5000;
        
        Eigen::Vector3d s_rgb = color.getRGB();
        Eigen::Vector3d d_rgb = des.getRGB();
        
        do {
            float t = (0.f + time) / endTime;
            Eigen::Vector3d t_rgb = (1 - t) * s_rgb + t * d_rgb;
            LumiverseColor mid(color);
            mid.setRGB(t_rgb[0], t_rgb[1], t_rgb[2]);
            
            par1->setColorRGB("color", mid.getRGB()[0], mid.getRGB()[1], mid.getRGB()[2]);
            this_thread::sleep_for(chrono::milliseconds(1000 / 24));
            time += 1000 / 24;
        } while (time <= endTime);
        
        
        m_rig->stop();
        ArnoldAnimationPatch *ap = (ArnoldAnimationPatch*)m_rig->getSimulationPatch();
        ap->close();
        
        m_renderingWindow = new RenderingWindow(ap->getWidth(), ap->getHeight(),
                                                ap->getBufferPointer(), m_rig);
        
        m_animation_timer = new AnimationTimer((GuiComponent*)m_renderingWindow->getContentComponent(),
                                               ap->getFrameManager());
        m_animation_timer->startTimer(1000.f / 48);
    }
    
    void shutdown() override
    {
        // Add your application's shutdown code here..
        m_animation_timer->stopTimer();
        //m_timer->stopTimer();
        m_rig->stop();
        
        m_animation_timer = nullptr;
        m_timer = nullptr;
        m_renderingWindow = nullptr;
        m_rig = nullptr;
    }
    
    //==============================================================================
    void systemRequestedQuit() override
    {
        // This is called when the app is being asked to quit: you can ignore this
        // request and let the app carry on running, or call quit() to allow the app to close.
        quit();
    }
    
    void anotherInstanceStarted (const String& commandLine) override
    {
        // When another instance of the app is launched while this one is running,
        // this method is invoked, and the commandLine parameter tells you what
        // the other instance's command-line arguments were.
    }
    
private:
    ScopedPointer<RenderingWindow> m_renderingWindow;
    ScopedPointer<Rig> m_rig;
    ScopedPointer<RepaintTimer> m_timer;
    ScopedPointer<AnimationTimer> m_animation_timer;
};

//==============================================================================
// This macro generates the main() routine that launches the app.
START_JUCE_APPLICATION (JuceWindowAppApplication)